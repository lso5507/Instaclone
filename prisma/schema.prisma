// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}
model User{
    id Int @id @default(autoincrement())
    firstName String
    lastName String?
    userName String @unique
    email String @unique
    password String // Not Encrypt?
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    avatar String?
    bio String?
    photos Photo[]
    followers User[] @relation("FollowRelation",references: [id])
    following User[] @relation("FollowRelation",references: [id])
    likes Like[]
    comments Comment[]
    rooms Room[] 
    messages Message[]

}
model Photo{
    id Int @id @default(autoincrement())
    user User @relation(fields:[userId],references:[id])
    userId Int
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    hashtags Hashtag[]
    file String
    caption String?
    likes Like[]
    comments Comment[]
}
model Hashtag{
    id Int @id @default(autoincrement())
    hashtag String @unique
    photos Photo[]
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
}
model Like{
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    photoId Int
    userId Int
    photo Photo  @relation(fields:[photoId],references:[id],onDelete:Cascade,onUpdate: Cascade)
    user User    @relation(fields:[userId],references:[id])
    @@unique([photoId,userId])

}
model Comment{
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    photoId Int
    userId Int
    photo Photo  @relation(fields:[photoId],references:[id],onDelete:Cascade,onUpdate: Cascade)
    user User    @relation(fields:[userId],references:[id])
    payload String


}

model Room{
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    users User[] 
    messages Message[]  
    read Int @default(0)

}
model Message{
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    payload String
    room Room @relation(fields:[roomId],references:[id])
    roomId Int
    user   User @relation(fields: [userId],references:[id])
    userId Int
    
}